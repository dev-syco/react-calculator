{"version":3,"sources":["components/common/Input/Input.tsx","const/index.ts","utils/index.ts","components/Screen/Screen.tsx","components/common/Grid/GridCell/GridCell.tsx","components/common/Grid/Grid.tsx","components/common/Button/Button.tsx","components/Keyboard/Keyboard.tsx","components/Calculator/Calculator.tsx","components/App.tsx","index.tsx"],"names":["INPUT_TYPE","CALCULATOR_BUTTON","BRACKETS","InputComponent","this","props","Component","CALCULATOR_ERROR","OPERATOR_TOKENS","ALLOWED_TOKENS","classNames","arr","forEach","i","Object","keys","key","push","join","replacePointToComma","expression","replaceExpressionSpaces","replace","expressionReadyForCalculation","isContainOperators","token","tokenIndex","indexOf","includes","length","ScreenComponent","onClickExpandExpression","expandExpression","bind","isExpandable","onExpandExpression","resultDisplay","result","onChange","resultAsExpression","className","expand","onClick","type","TEXT","value","toString","placeholder","autoFocus","GridCellComponent","style","styles","children","Array","concat","size","flexBasis","GridComponent","data","nanoid","gridCells","cols","map","cell","colspan","wrapWithCellComponent","ButtonComponent","label","KeyboardComponent","keyboardButtonsProps","PureComponent","CalculatorComponent","keyboardButtons","Map","set","CLEAN","cleanExpression","addBrackets","PERCENT","DIVIDE","SEVEN","EIGHT","NINE","MULTIPLY","FOUR","FIVE","SIX","MINUS","ONE","TWO","THREE","PLUS","ZERO","FLOAT","EQUAL","calculateExpression","computedButtonsCache","calculateDebounced","debounce","onScreenInput","handleScreenInput","resetResultAsExpression","state","undefined","resultAsNewExpression","prevProps","prevState","event","currentTarget","nativeEvent","trim","str","allowedSymbols","isSafe","isStringSafe","setState","addToExpression","brackets","counter","opened","closed","open","close","fulFillBracket","OPEN","CLOSE","getCalculated","replaceCommaToPoint","num","split","number","pow","POW","transformBigNumberToPow","QuickMath","calculate","e","message","UNCLOSED_PARENTHESES","console","error","calculatorKeyboardButtonsAsArray","button","onButtonClickDefault","filter","entries","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e281a456.chunk.js","sourcesContent":["import React, { ChangeEvent, Component, KeyboardEvent } from 'react';\r\n\r\nimport './Input.scss';\r\n\r\nexport enum INPUT_TYPE {\r\n  TEXT = 'text',\r\n  PASSWORD = 'password',\r\n}\r\n\r\nexport interface InputComponentProps {\r\n  type: INPUT_TYPE;\r\n  value?: string;\r\n  defaultValue?: string;\r\n  autoFocus?: boolean;\r\n  placeholder?: string;\r\n  onKeyDown?: (e: KeyboardEvent) => void;\r\n  onChange?: (e: ChangeEvent<HTMLInputElement>) => void;\r\n}\r\n\r\nexport class InputComponent extends Component<InputComponentProps> {\r\n  render() {\r\n    return (\r\n      <input { ...this.props }/>\r\n    );\r\n  }\r\n}\r\n","export enum CALCULATOR_BUTTON {\r\n  CLEAN = 'C',\r\n  BRACKETS = '()',\r\n  PERCENT = '%',\r\n  POW = '^',\r\n  RADICAL = '√',\r\n  PLUS = '+',\r\n  MINUS = '-',\r\n  MULTIPLY = '×',\r\n  DIVIDE = '÷',\r\n  EQUAL = '=',\r\n  FLOAT = ',',\r\n  ZERO = '0',\r\n  ONE = '1',\r\n  TWO = '2',\r\n  THREE = '3',\r\n  FOUR = '4',\r\n  FIVE = '5',\r\n  SIX = '6',\r\n  SEVEN = '7',\r\n  EIGHT = '8',\r\n  NINE = '9',\r\n}\r\n\r\nexport enum BRACKETS {\r\n  OPEN = '(',\r\n  CLOSE = ')'\r\n}\r\n\r\nexport const OPERATOR_TOKENS = [\r\n  '/', '÷', '*', '×', 'x', 'x', 'X', '=', '-', '−', '+', '^', '√',\r\n];\r\n\r\nexport const ALLOWED_TOKENS = [\r\n  ...OPERATOR_TOKENS,\r\n  '%', '.', ',', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '(', ')',\r\n];\r\n\r\nexport enum CALCULATOR_ERROR {\r\n  UNCLOSED_PARENTHESES = 'Unclosed parentheses'\r\n}\r\n","import { CALCULATOR_BUTTON, OPERATOR_TOKENS } from '../const';\r\n\r\nexport function fulFillBracket(arr: Array<string> | string, brackets: { open: string, close: string }) {\r\n  const counter = {\r\n    opened: 0,\r\n    closed: 0,\r\n  };\r\n\r\n  for (let token of arr) {\r\n    if (token === brackets.open) {\r\n      counter.opened++;\r\n    }\r\n    if (token === brackets.close) {\r\n      counter.closed++;\r\n    }\r\n  }\r\n\r\n  return counter.opened === counter.closed ? brackets.open : brackets.close;\r\n}\r\n\r\nexport function isStringSafe(str: string, allowedSymbols: string[]) {\r\n  let isSafe = true;\r\n  for (let token of str) {\r\n    if (!allowedSymbols.includes(token)) {\r\n      return isSafe = false;\r\n    }\r\n  }\r\n\r\n  return isSafe;\r\n}\r\n\r\nexport function classNames(arr: Array<string | object>) {\r\n  const classNames: string[] = [];\r\n\r\n  arr.forEach((i) => {\r\n    if (typeof i === 'object') {\r\n      Object.keys(i).forEach((key) => {\r\n        if ((i as any)[ key ]) {\r\n          classNames.push(key);\r\n        }\r\n      });\r\n    } else {\r\n      classNames.push(i);\r\n    }\r\n  });\r\n\r\n  return classNames.join(' ');\r\n}\r\n\r\nexport function transformBigNumberToPow(num: number) {\r\n  const { 0: number, 1: pow } = num.toString().split('+');\r\n  return pow ? `${ number }${ CALCULATOR_BUTTON.MULTIPLY }10${ CALCULATOR_BUTTON.POW }${ pow }` : number;\r\n}\r\n\r\nexport function replacePointToComma(expression: string) {\r\n  return replaceExpressionSpaces(expression).replace(/\\./g, ',');\r\n}\r\n\r\nexport function replaceCommaToPoint(expression: string) {\r\n  return replaceExpressionSpaces(expression).replace(/,/g, '.');\r\n}\r\n\r\nexport function replaceExpressionSpaces(expression: string) {\r\n  return expression.replace(/ /g, '');\r\n}\r\n\r\nexport function expressionReadyForCalculation(expression: string) {\r\n  let isContainOperators = false;\r\n\r\n  for (let token of expression) {\r\n    const tokenIndex = expression.indexOf(token);\r\n    if (OPERATOR_TOKENS.includes(token) && tokenIndex + 1 !== expression.length) {\r\n      return isContainOperators = true;\r\n    }\r\n  }\r\n  return isContainOperators;\r\n}\r\n","import React, { ChangeEvent, Component } from 'react';\r\nimport { INPUT_TYPE, InputComponent } from '../common/Input';\r\nimport { Expression } from '../../interface';\r\n\r\nimport './Screen.scss';\r\nimport { classNames } from '../../utils';\r\n\r\nexport interface ScreenComponentProps {\r\n  expression: Expression;\r\n  result?: string;\r\n  resultAsExpression?: boolean;\r\n  onChange: (e: ChangeEvent<HTMLInputElement>) => void;\r\n  onExpandExpression?: () => void;\r\n}\r\n\r\nexport class ScreenComponent extends Component<ScreenComponentProps> {\r\n  public onClickExpandExpression = this.expandExpression.bind(this);\r\n\r\n  public get isExpandable() {\r\n    const { result, resultAsExpression } = this.props;\r\n    return resultAsExpression && result;\r\n  }\r\n\r\n  public expandExpression() {\r\n    if (this.isExpandable && this.props.onExpandExpression) {\r\n      this.props.onExpandExpression();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { expression, result, onChange, resultAsExpression } = this.props;\r\n    let resultDisplay;\r\n    if (expression && result) {\r\n      resultDisplay =\r\n        <div className=\"screen-component-result\">\r\n          <div className={ classNames([ `screen-component-result--expression`, { expand: this.isExpandable } ]) }\r\n               onClick={ this.onClickExpandExpression }>\r\n            { expression }\r\n          </div>\r\n          <div className=\"screen-component-result--result\">\r\n            <span>=</span>\r\n            { result }\r\n          </div>\r\n        </div>;\r\n    } else {\r\n      resultDisplay = <div className=\"screen-component-result\"/>;\r\n    }\r\n\r\n    return (\r\n      <div className=\"screen-component\">\r\n        { resultDisplay }\r\n        <InputComponent type={ INPUT_TYPE.TEXT } value={ resultAsExpression && result ? result.toString() : expression } placeholder=\"0\"\r\n                        onChange={ onChange } autoFocus={ true }/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nimport './GridCell.scss';\r\n\r\nexport interface GridCellComponentProps {\r\n  size?: number;\r\n  colspan?: number;\r\n  className?: string[] | string;\r\n}\r\n\r\nexport class GridCellComponent extends Component<GridCellComponentProps> {\r\n  get classNames() {\r\n    const { className } = this.props;\r\n    let classNames = [ 'grid-cell-component' ];\r\n\r\n    if (className instanceof Array) {\r\n      classNames = classNames.concat(className);\r\n    } else if (className) {\r\n      classNames.push(className);\r\n    }\r\n    return classNames.join(' ');\r\n  }\r\n\r\n  get styles() {\r\n    const { size } = this.props;\r\n    return {\r\n      flexBasis: size ? `${ 100 * size }%` : '',\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={ this.classNames } style={ this.styles }>\r\n        { this.props.children }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component, ReactNode } from 'react';\r\nimport nanoid from 'nanoid';\r\nimport { GridCellComponent, GridCellComponentProps } from './GridCell/GridCell';\r\n\r\nimport './Grid.scss';\r\n\r\nexport interface GridComponentProps {\r\n  cols: number;\r\n}\r\n\r\nexport class GridComponent extends Component<GridComponentProps> {\r\n  public get gridCells() {\r\n    const { cols } = this.props;\r\n    if (this.props.children instanceof Array) {\r\n      return this.props.children.map((cell: any) => {\r\n        const { colspan } = cell.props;\r\n        return this.wrapWithCellComponent(cell, { size: (colspan || 1) / cols, ...cell.props });\r\n      });\r\n    } else {\r\n      return this.wrapWithCellComponent(this.props.children, { size: 1 });\r\n    }\r\n  }\r\n\r\n  public wrapWithCellComponent(data: ReactNode, props: GridCellComponentProps = {}) {\r\n    return <GridCellComponent key={ nanoid() } { ...props }>{ data }</GridCellComponent>;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"grid-component\">\r\n        { this.gridCells }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component, MouseEvent } from 'react';\r\n\r\nimport './Button.scss';\r\n\r\nexport interface ButtonComponentProps {\r\n  label?: string | number;\r\n  onClick?: (e: MouseEvent) => void;\r\n}\r\n\r\nexport class ButtonComponent extends Component<ButtonComponentProps> {\r\n  render() {\r\n    return (\r\n      <button onClick={ this.props.onClick }>{ this.props.label }</button>\r\n    );\r\n  }\r\n}\r\n","import React, { PureComponent } from 'react';\r\nimport { GridComponent } from '../common/Grid';\r\nimport { ButtonComponent, ButtonComponentProps } from '../common/Button';\r\nimport { GridCellComponentProps } from '../common/Grid/GridCell/GridCell';\r\n\r\nimport './Keyboard.scss';\r\n\r\nexport interface KeyboardComponentProps {\r\n  keyboardButtonsProps: KeyboardButton[]\r\n}\r\n\r\nexport type KeyboardButton = ButtonComponentProps & GridCellComponentProps;\r\n\r\nexport class KeyboardComponent extends PureComponent<KeyboardComponentProps> {\r\n  public render() {\r\n    return (\r\n      <div className=\"keyboard-component\">\r\n        <GridComponent cols={ 4 }>\r\n          {\r\n            this.props.keyboardButtonsProps.map((props, key) => {\r\n              return <ButtonComponent key={ key } { ...props }/>;\r\n            })\r\n          }\r\n        </GridComponent>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { ChangeEvent, Component } from 'react';\r\nimport { debounce } from 'lodash';\r\nimport { ScreenComponent } from '../Screen';\r\nimport { KeyboardButton, KeyboardComponent } from '../Keyboard';\r\nimport { QuickMath } from '@dev-syco/quick-math';\r\nimport {\r\n  expressionReadyForCalculation,\r\n  fulFillBracket,\r\n  isStringSafe,\r\n  replaceCommaToPoint,\r\n  replaceExpressionSpaces,\r\n  replacePointToComma,\r\n  transformBigNumberToPow,\r\n} from '../../utils';\r\nimport { ALLOWED_TOKENS, BRACKETS, CALCULATOR_BUTTON, CALCULATOR_ERROR } from '../../const';\r\nimport { Expression } from '../../interface';\r\n\r\nimport './Calculator.scss';\r\n\r\nexport interface CalculatorComponentProps {\r\n}\r\n\r\nexport interface CalculatorComponentState {\r\n  expression: Expression;\r\n  result?: string;\r\n  resultAsNewExpression?: boolean;\r\n}\r\n\r\nexport class CalculatorComponent extends Component<CalculatorComponentProps, CalculatorComponentState> {\r\n  public keyboardButtons: Map<CALCULATOR_BUTTON, KeyboardButton> = new Map()\r\n    .set(CALCULATOR_BUTTON.CLEAN, { onClick: () => this.cleanExpression(), className: 'light-blue' })\r\n    .set(CALCULATOR_BUTTON.BRACKETS, { onClick: () => this.addBrackets(), className: 'light-blue' })\r\n    .set(CALCULATOR_BUTTON.PERCENT, { className: 'light-blue' })\r\n    .set(CALCULATOR_BUTTON.DIVIDE, { className: 'blue' })\r\n    .set(CALCULATOR_BUTTON.SEVEN, {})\r\n    .set(CALCULATOR_BUTTON.EIGHT, {})\r\n    .set(CALCULATOR_BUTTON.NINE, {})\r\n    .set(CALCULATOR_BUTTON.MULTIPLY, { className: 'blue' })\r\n    .set(CALCULATOR_BUTTON.FOUR, {})\r\n    .set(CALCULATOR_BUTTON.FIVE, {})\r\n    .set(CALCULATOR_BUTTON.SIX, {})\r\n    .set(CALCULATOR_BUTTON.MINUS, { className: 'blue' })\r\n    .set(CALCULATOR_BUTTON.ONE, {})\r\n    .set(CALCULATOR_BUTTON.TWO, {})\r\n    .set(CALCULATOR_BUTTON.THREE, {})\r\n    .set(CALCULATOR_BUTTON.PLUS, { className: 'blue' })\r\n    .set(CALCULATOR_BUTTON.ZERO, { colspan: 2 })\r\n    .set(CALCULATOR_BUTTON.FLOAT, {})\r\n    .set(CALCULATOR_BUTTON.EQUAL, { onClick: () => this.calculateExpression(true), className: 'green' });\r\n  public computedButtonsCache: KeyboardButton[] = [];\r\n  public calculateDebounced = debounce(() => this.calculateExpression(), 250);\r\n  public onScreenInput = this.handleScreenInput.bind(this);\r\n  public onExpandExpression = this.resetResultAsExpression.bind(this);\r\n\r\n  constructor(props: CalculatorComponentProps) {\r\n    super(props);\r\n    this.state = {\r\n      expression: '',\r\n      result: undefined,\r\n      resultAsNewExpression: false,\r\n    };\r\n  }\r\n\r\n  public componentDidUpdate(prevProps: Readonly<CalculatorComponentProps>, prevState: Readonly<CalculatorComponentState>): void {\r\n    if (this.state.expression !== prevState.expression) {\r\n      this.calculateDebounced();\r\n    }\r\n  }\r\n\r\n  public get calculatorKeyboardButtonsAsArray() {\r\n    for (let [ label, props ] of this.keyboardButtons.entries()) {\r\n      const button = { label, ...props, onClick: props.onClick || this.onButtonClickDefault(label) };\r\n      const existing = this.computedButtonsCache.filter(i => i.label === button.label);\r\n      if (!existing.length) {\r\n        this.computedButtonsCache.push(button);\r\n      }\r\n    }\r\n    return this.computedButtonsCache;\r\n  }\r\n\r\n  public handleScreenInput(event: ChangeEvent<HTMLInputElement>) {\r\n    const expression = replaceExpressionSpaces(event.currentTarget && event.currentTarget.value);\r\n    const nativeEvent = event.nativeEvent as InputEvent;\r\n    const button = nativeEvent.data && nativeEvent.data.trim();\r\n\r\n    if (button === CALCULATOR_BUTTON.EQUAL) {\r\n      return this.calculateExpression(true);\r\n    }\r\n\r\n    if (isStringSafe(expression, ALLOWED_TOKENS)) {\r\n      this.setState({ expression: replacePointToComma(expression), resultAsNewExpression: false });\r\n    }\r\n  }\r\n\r\n  public onButtonClickDefault(value: string) {\r\n    return () => {\r\n      this.addToExpression(value);\r\n    };\r\n  }\r\n\r\n  public addToExpression(value: string) {\r\n    return this.setState(state => {\r\n      const { resultAsNewExpression, expression, result } = state;\r\n      return {\r\n        expression: (resultAsNewExpression ? result : expression) + value,\r\n      };\r\n    });\r\n  }\r\n\r\n  public cleanExpression() {\r\n    this.setState({ expression: '', result: undefined });\r\n  }\r\n\r\n  public resetResultAsExpression() {\r\n    this.setState({ resultAsNewExpression: false });\r\n  }\r\n\r\n  public addBrackets() {\r\n    const { expression } = this.state;\r\n    this.addToExpression(fulFillBracket(expression, { open: BRACKETS.OPEN, close: BRACKETS.CLOSE }));\r\n  }\r\n\r\n  public calculateExpression(resultAsNewExpression: boolean = false) {\r\n    let result = undefined;\r\n    if (expressionReadyForCalculation(this.state.expression)) {\r\n      result = replacePointToComma(this.getCalculated());\r\n    }\r\n    if (result === 'NaN') {\r\n      result = undefined;\r\n    }\r\n    this.setState({ result, resultAsNewExpression });\r\n  }\r\n\r\n  private getCalculated(): string {\r\n    try {\r\n      const expression = replaceCommaToPoint(this.state.expression);\r\n      return transformBigNumberToPow(QuickMath.calculate(expression));\r\n    } catch (e) {\r\n      if (e.message !== CALCULATOR_ERROR.UNCLOSED_PARENTHESES) {\r\n        console.error(e.message);\r\n        return 'Error';\r\n      } else {\r\n        return '';\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"calculator-component\">\r\n        <ScreenComponent expression={ this.state.expression }\r\n                         resultAsExpression={ this.state.resultAsNewExpression }\r\n                         result={ this.state.result }\r\n                         onChange={ this.onScreenInput }\r\n                         onExpandExpression={ this.onExpandExpression }/>\r\n        <KeyboardComponent keyboardButtonsProps={ this.calculatorKeyboardButtonsAsArray }/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { CalculatorComponent } from './Calculator';\r\n\r\nimport './App.scss';\r\n\r\nexport class App extends Component {\r\n  public render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <main>\r\n          <CalculatorComponent/>\r\n        </main>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport 'react-app-polyfill/ie11';\r\nimport 'react-app-polyfill/stable';\r\nimport { App } from './components/App';\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\n"],"sourceRoot":""}