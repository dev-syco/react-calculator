{"version":3,"sources":["components/common/Input/Input.tsx","const/index.ts","utils/index.ts","components/Screen/Screen.tsx","components/common/Grid/GridCell/GridCell.tsx","components/common/Grid/Grid.tsx","components/common/Button/Button.tsx","components/Keyboard/Keyboard.tsx","components/Calculator/Calculator.tsx","components/App.tsx","index.tsx"],"names":["INPUT_TYPE","CALCULATOR_BUTTON","BRACKETS","InputComponent","this","props","Component","CALCULATOR_ERROR","OPERATOR_TOKENS","ALLOWED_TOKENS","classNames","arr","forEach","i","Object","keys","key","push","join","replacePointToComma","expression","replaceExpressionSpaces","replace","expressionReadyForCalculation","isContainOperators","token","tokenIndex","indexOf","includes","length","ScreenComponent","onClickExpandExpression","expandExpression","bind","isExpandable","onExpandExpression","resultDisplay","result","onChange","resultAsExpression","className","expand","onClick","type","TEXT","value","toString","placeholder","autoFocus","GridCellComponent","style","styles","children","Array","concat","size","flexBasis","GridComponent","data","nanoid","gridCells","cols","map","cell","colspan","wrapWithCellComponent","ButtonComponent","label","KeyboardComponent","keyboardButtonsProps","PureComponent","CalculatorComponent","keyboardButtons","Map","set","CLEAN","cleanExpression","addBrackets","PERCENT","DIVIDE","SEVEN","EIGHT","NINE","MULTIPLY","FOUR","FIVE","SIX","MINUS","ONE","TWO","THREE","PLUS","ZERO","FLOAT","EQUAL","calculateExpression","computedButtonsCache","calculateDebounced","debounce","onScreenInput","handleScreenInput","resetResultAsExpression","state","undefined","resultAsNewExpression","prevProps","prevState","event","currentTarget","nativeEvent","trim","str","allowedSymbols","isSafe","isStringSafe","setState","addToExpression","brackets","counter","opened","closed","open","close","fulFillBracket","OPEN","CLOSE","getCalculated","replaceCommaToPoint","num","split","number","pow","POW","transformBigNumberToPow","QuickMath","calculate","e","message","UNCLOSED_PARENTHESES","console","error","calculatorKeyboardButtonsAsArray","button","onButtonClickDefault","filter","entries","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a04462b2.chunk.js","sourcesContent":["import React, { ChangeEvent, Component, KeyboardEvent } from 'react';\n\nimport './Input.scss';\n\nexport enum INPUT_TYPE {\n  TEXT = 'text',\n  PASSWORD = 'password',\n}\n\nexport interface InputComponentProps {\n  type: INPUT_TYPE;\n  value?: string;\n  defaultValue?: string;\n  autoFocus?: boolean;\n  placeholder?: string;\n  onKeyDown?: (e: KeyboardEvent) => void;\n  onChange?: (e: ChangeEvent<HTMLInputElement>) => void;\n}\n\nexport class InputComponent extends Component<InputComponentProps> {\n  render() {\n    return (\n      <input { ...this.props }/>\n    );\n  }\n}\n","export enum CALCULATOR_BUTTON {\n  CLEAN = 'C',\n  BRACKETS = '()',\n  PERCENT = '%',\n  POW = '^',\n  RADICAL = '√',\n  PLUS = '+',\n  MINUS = '-',\n  MULTIPLY = '×',\n  DIVIDE = '÷',\n  EQUAL = '=',\n  FLOAT = ',',\n  ZERO = '0',\n  ONE = '1',\n  TWO = '2',\n  THREE = '3',\n  FOUR = '4',\n  FIVE = '5',\n  SIX = '6',\n  SEVEN = '7',\n  EIGHT = '8',\n  NINE = '9',\n}\n\nexport enum BRACKETS {\n  OPEN = '(',\n  CLOSE = ')'\n}\n\nexport const OPERATOR_TOKENS = [\n  '/', '÷', '*', '×', 'x', 'x', 'X', '=', '-', '−', '+', '^', '√',\n];\n\nexport const ALLOWED_TOKENS = [\n  ...OPERATOR_TOKENS,\n  '%', '.', ',', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '(', ')',\n];\n\nexport enum CALCULATOR_ERROR {\n  UNCLOSED_PARENTHESES = 'Unclosed parentheses'\n}\n","import { CALCULATOR_BUTTON, OPERATOR_TOKENS } from '../const';\n\nexport function fulFillBracket(arr: Array<string> | string, brackets: { open: string, close: string }) {\n  const counter = {\n    opened: 0,\n    closed: 0,\n  };\n\n  for (let token of arr) {\n    if (token === brackets.open) {\n      counter.opened++;\n    }\n    if (token === brackets.close) {\n      counter.closed++;\n    }\n  }\n\n  return counter.opened === counter.closed ? brackets.open : brackets.close;\n}\n\nexport function isStringSafe(str: string, allowedSymbols: string[]) {\n  let isSafe = true;\n  for (let token of str) {\n    if (!allowedSymbols.includes(token)) {\n      return isSafe = false;\n    }\n  }\n\n  return isSafe;\n}\n\nexport function classNames(arr: Array<string | object>) {\n  const classNames: string[] = [];\n\n  arr.forEach((i) => {\n    if (typeof i === 'object') {\n      Object.keys(i).forEach((key) => {\n        if ((i as any)[ key ]) {\n          classNames.push(key);\n        }\n      });\n    } else {\n      classNames.push(i);\n    }\n  });\n\n  return classNames.join(' ');\n}\n\nexport function transformBigNumberToPow(num: number) {\n  const { 0: number, 1: pow } = num.toString().split('+');\n  return pow ? `${ number }${ CALCULATOR_BUTTON.MULTIPLY }10${ CALCULATOR_BUTTON.POW }${ pow }` : number;\n}\n\nexport function replacePointToComma(expression: string) {\n  return replaceExpressionSpaces(expression).replace(/\\./g, ',');\n}\n\nexport function replaceCommaToPoint(expression: string) {\n  return replaceExpressionSpaces(expression).replace(/,/g, '.');\n}\n\nexport function replaceExpressionSpaces(expression: string) {\n  return expression.replace(/ /g, '');\n}\n\nexport function expressionReadyForCalculation(expression: string) {\n  let isContainOperators = false;\n\n  for (let token of expression) {\n    const tokenIndex = expression.indexOf(token);\n    if (OPERATOR_TOKENS.includes(token) && tokenIndex + 1 !== expression.length) {\n      return isContainOperators = true;\n    }\n  }\n  return isContainOperators;\n}\n","import React, { ChangeEvent, Component } from 'react';\nimport { INPUT_TYPE, InputComponent } from '../common/Input';\nimport { Expression } from '../../interface';\n\nimport './Screen.scss';\nimport { classNames } from '../../utils';\n\nexport interface ScreenComponentProps {\n  expression: Expression;\n  result?: string;\n  resultAsExpression?: boolean;\n  onChange: (e: ChangeEvent<HTMLInputElement>) => void;\n  onExpandExpression?: () => void;\n}\n\nexport class ScreenComponent extends Component<ScreenComponentProps> {\n  public onClickExpandExpression = this.expandExpression.bind(this);\n\n  public get isExpandable() {\n    const { result, resultAsExpression } = this.props;\n    return resultAsExpression && result;\n  }\n\n  public expandExpression() {\n    if (this.isExpandable && this.props.onExpandExpression) {\n      this.props.onExpandExpression();\n    }\n  }\n\n  render() {\n    const { expression, result, onChange, resultAsExpression } = this.props;\n    let resultDisplay;\n    if (expression && result) {\n      resultDisplay =\n        <div className=\"screen-component-result\">\n          <div className={ classNames([ `screen-component-result--expression`, { expand: this.isExpandable } ]) }\n               onClick={ this.onClickExpandExpression }>\n            { expression }\n          </div>\n          <div className=\"screen-component-result--result\">\n            <span>=</span>\n            { result }\n          </div>\n        </div>;\n    } else {\n      resultDisplay = <div className=\"screen-component-result\"/>;\n    }\n\n    return (\n      <div className=\"screen-component\">\n        { resultDisplay }\n        <InputComponent type={ INPUT_TYPE.TEXT } value={ resultAsExpression && result ? result.toString() : expression } placeholder=\"0\"\n                        onChange={ onChange } autoFocus={ true }/>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nimport './GridCell.scss';\n\nexport interface GridCellComponentProps {\n  size?: number;\n  colspan?: number;\n  className?: string[] | string;\n}\n\nexport class GridCellComponent extends Component<GridCellComponentProps> {\n  get classNames() {\n    const { className } = this.props;\n    let classNames = [ 'grid-cell-component' ];\n\n    if (className instanceof Array) {\n      classNames = classNames.concat(className);\n    } else if (className) {\n      classNames.push(className);\n    }\n    return classNames.join(' ');\n  }\n\n  get styles() {\n    const { size } = this.props;\n    return {\n      flexBasis: size ? `${ 100 * size }%` : '',\n    };\n  }\n\n  render() {\n    return (\n      <div className={ this.classNames } style={ this.styles }>\n        { this.props.children }\n      </div>\n    );\n  }\n}\n","import React, { Component, ReactNode } from 'react';\nimport nanoid from 'nanoid';\nimport { GridCellComponent, GridCellComponentProps } from './GridCell/GridCell';\n\nimport './Grid.scss';\n\nexport interface GridComponentProps {\n  cols: number;\n}\n\nexport class GridComponent extends Component<GridComponentProps> {\n  public get gridCells() {\n    const { cols } = this.props;\n    if (this.props.children instanceof Array) {\n      return this.props.children.map((cell: any) => {\n        const { colspan } = cell.props;\n        return this.wrapWithCellComponent(cell, { size: (colspan || 1) / cols, ...cell.props });\n      });\n    } else {\n      return this.wrapWithCellComponent(this.props.children, { size: 1 });\n    }\n  }\n\n  public wrapWithCellComponent(data: ReactNode, props: GridCellComponentProps = {}) {\n    return <GridCellComponent key={ nanoid() } { ...props }>{ data }</GridCellComponent>;\n  }\n\n  render() {\n    return (\n      <div className=\"grid-component\">\n        { this.gridCells }\n      </div>\n    );\n  }\n}\n","import React, { Component, MouseEvent } from 'react';\n\nimport './Button.scss';\n\nexport interface ButtonComponentProps {\n  label?: string | number;\n  onClick?: (e: MouseEvent) => void;\n}\n\nexport class ButtonComponent extends Component<ButtonComponentProps> {\n  render() {\n    return (\n      <button onClick={ this.props.onClick }>{ this.props.label }</button>\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\nimport { GridComponent } from '../common/Grid';\nimport { ButtonComponent, ButtonComponentProps } from '../common/Button';\nimport { GridCellComponentProps } from '../common/Grid/GridCell/GridCell';\n\nimport './Keyboard.scss';\n\nexport interface KeyboardComponentProps {\n  keyboardButtonsProps: KeyboardButton[]\n}\n\nexport type KeyboardButton = ButtonComponentProps & GridCellComponentProps;\n\nexport class KeyboardComponent extends PureComponent<KeyboardComponentProps> {\n  public render() {\n    return (\n      <div className=\"keyboard-component\">\n        <GridComponent cols={ 4 }>\n          {\n            this.props.keyboardButtonsProps.map((props, key) => {\n              return <ButtonComponent key={ key } { ...props }/>;\n            })\n          }\n        </GridComponent>\n      </div>\n    );\n  }\n}\n","import React, { ChangeEvent, Component } from 'react';\nimport { debounce } from 'lodash';\nimport { ScreenComponent } from '../Screen';\nimport { KeyboardButton, KeyboardComponent } from '../Keyboard';\nimport { QuickMath } from '@dev-syco/quick-math';\nimport {\n  expressionReadyForCalculation,\n  fulFillBracket,\n  isStringSafe,\n  replaceCommaToPoint,\n  replaceExpressionSpaces,\n  replacePointToComma,\n  transformBigNumberToPow,\n} from '../../utils';\nimport { ALLOWED_TOKENS, BRACKETS, CALCULATOR_BUTTON, CALCULATOR_ERROR } from '../../const';\nimport { Expression } from '../../interface';\n\nimport './Calculator.scss';\n\nexport interface CalculatorComponentProps {\n}\n\nexport interface CalculatorComponentState {\n  expression: Expression;\n  result?: string;\n  resultAsNewExpression?: boolean;\n}\n\nexport class CalculatorComponent extends Component<CalculatorComponentProps, CalculatorComponentState> {\n  public keyboardButtons: Map<CALCULATOR_BUTTON, KeyboardButton> = new Map()\n    .set(CALCULATOR_BUTTON.CLEAN, { onClick: () => this.cleanExpression(), className: 'light-blue' })\n    .set(CALCULATOR_BUTTON.BRACKETS, { onClick: () => this.addBrackets(), className: 'light-blue' })\n    .set(CALCULATOR_BUTTON.PERCENT, { className: 'light-blue' })\n    .set(CALCULATOR_BUTTON.DIVIDE, { className: 'blue' })\n    .set(CALCULATOR_BUTTON.SEVEN, {})\n    .set(CALCULATOR_BUTTON.EIGHT, {})\n    .set(CALCULATOR_BUTTON.NINE, {})\n    .set(CALCULATOR_BUTTON.MULTIPLY, { className: 'blue' })\n    .set(CALCULATOR_BUTTON.FOUR, {})\n    .set(CALCULATOR_BUTTON.FIVE, {})\n    .set(CALCULATOR_BUTTON.SIX, {})\n    .set(CALCULATOR_BUTTON.MINUS, { className: 'blue' })\n    .set(CALCULATOR_BUTTON.ONE, {})\n    .set(CALCULATOR_BUTTON.TWO, {})\n    .set(CALCULATOR_BUTTON.THREE, {})\n    .set(CALCULATOR_BUTTON.PLUS, { className: 'blue' })\n    .set(CALCULATOR_BUTTON.ZERO, { colspan: 2 })\n    .set(CALCULATOR_BUTTON.FLOAT, {})\n    .set(CALCULATOR_BUTTON.EQUAL, { onClick: () => this.calculateExpression(true), className: 'green' });\n  public computedButtonsCache: KeyboardButton[] = [];\n  public calculateDebounced = debounce(() => this.calculateExpression(), 250);\n  public onScreenInput = this.handleScreenInput.bind(this);\n  public onExpandExpression = this.resetResultAsExpression.bind(this);\n\n  constructor(props: CalculatorComponentProps) {\n    super(props);\n    this.state = {\n      expression: '',\n      result: undefined,\n      resultAsNewExpression: false,\n    };\n  }\n\n  public componentDidUpdate(prevProps: Readonly<CalculatorComponentProps>, prevState: Readonly<CalculatorComponentState>): void {\n    if (this.state.expression !== prevState.expression) {\n      this.calculateDebounced();\n    }\n  }\n\n  public get calculatorKeyboardButtonsAsArray() {\n    for (let [ label, props ] of this.keyboardButtons.entries()) {\n      const button = { label, ...props, onClick: props.onClick || this.onButtonClickDefault(label) };\n      const existing = this.computedButtonsCache.filter(i => i.label === button.label);\n      if (!existing.length) {\n        this.computedButtonsCache.push(button);\n      }\n    }\n    return this.computedButtonsCache;\n  }\n\n  public handleScreenInput(event: ChangeEvent<HTMLInputElement>) {\n    const expression = replaceExpressionSpaces(event.currentTarget && event.currentTarget.value);\n    const nativeEvent = event.nativeEvent as InputEvent;\n    const button = nativeEvent.data && nativeEvent.data.trim();\n\n    if (button === CALCULATOR_BUTTON.EQUAL) {\n      return this.calculateExpression(true);\n    }\n\n    if (isStringSafe(expression, ALLOWED_TOKENS)) {\n      this.setState({ expression: replacePointToComma(expression), resultAsNewExpression: false });\n    }\n  }\n\n  public onButtonClickDefault(value: string) {\n    return () => {\n      this.addToExpression(value);\n    };\n  }\n\n  public addToExpression(value: string) {\n    return this.setState(state => {\n      const { resultAsNewExpression, expression, result } = state;\n      return {\n        expression: (resultAsNewExpression ? result : expression) + value,\n      };\n    });\n  }\n\n  public cleanExpression() {\n    this.setState({ expression: '', result: undefined });\n  }\n\n  public resetResultAsExpression() {\n    this.setState({ resultAsNewExpression: false });\n  }\n\n  public addBrackets() {\n    const { expression } = this.state;\n    this.addToExpression(fulFillBracket(expression, { open: BRACKETS.OPEN, close: BRACKETS.CLOSE }));\n  }\n\n  public calculateExpression(resultAsNewExpression: boolean = false) {\n    let result = undefined;\n    if (expressionReadyForCalculation(this.state.expression)) {\n      result = replacePointToComma(this.getCalculated());\n    }\n    if (result === 'NaN') {\n      result = undefined;\n    }\n    this.setState({ result, resultAsNewExpression });\n  }\n\n  private getCalculated(): string {\n    try {\n      const expression = replaceCommaToPoint(this.state.expression);\n      return transformBigNumberToPow(QuickMath.calculate(expression));\n    } catch (e) {\n      if (e.message !== CALCULATOR_ERROR.UNCLOSED_PARENTHESES) {\n        console.error(e.message);\n        return 'Error';\n      } else {\n        return '';\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"calculator-component\">\n        <ScreenComponent expression={ this.state.expression }\n                         resultAsExpression={ this.state.resultAsNewExpression }\n                         result={ this.state.result }\n                         onChange={ this.onScreenInput }\n                         onExpandExpression={ this.onExpandExpression }/>\n        <KeyboardComponent keyboardButtonsProps={ this.calculatorKeyboardButtonsAsArray }/>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { CalculatorComponent } from './Calculator';\n\nimport './App.scss';\n\nexport class App extends Component {\n  public render() {\n    return (\n      <div className=\"app\">\n        <main>\n          <CalculatorComponent/>\n        </main>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\nimport { App } from './components/App';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n"],"sourceRoot":""}